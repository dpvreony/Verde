{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"UA-32607724-1","tagline":"Integration test and application health verification framework for ASP.Net MVC","name":"Verde","body":"##Overview\r\n\r\nVerde is an integration test and application health verification framework for ASP.Net MVC. Integration tests are intended to automate verifying the different components of your application such as databases, web services, etc. are working together correctly. Unlike test runners integrated into Visual Studio or standalone applications, the Verde framework runs tests directly within your web application; leveraging the same configuration settings, security permissions, network topology, etc. This allows exposing issues that may not otherwise be encountered until an end-user actually starts using the application. Verde is intended to complement a robust suite of unit tests; the unit tests ensure all the individual units of work function correctly, while integration tests ensure everything works together. \r\n\r\nThe easiest way to add Verde to your project is via NuGet - https://nuget.org/packages/Verde/0.5.1\r\n```bat\r\nPM> Install-Package Verde\r\n```\r\n##Getting Started\r\nVerde provides a browser based GUI based on the the [QUnit](http://docs.jquery.com/QUnit) JavaScript test framework. \r\n\r\n![Screenshot](http://dl.dropbox.com/u/7446385/verde_gui_screenshot.PNG)\r\n\r\nThe GUI in turn makes AJAX calls to a RESTful endpoint on your server to execute tests and get back the results as a JSON data structure. These same RESTful endpoints can also be invoked directly by an automated deployment script or application monitoring service.\r\n\r\nThe framework is designed to be easily dropped into an existing MVC application with minimal configuration overhead, i.e., no changes to your web.config and routing rules are automatically injected by the framework (modeled after the MvcMiniProfiler). Basically all you need to do is add a reference to the Verde library and add a small bit to the **Application_Start** event in your global.asax.\r\n\r\n```csharp\r\n// Minimal setup\r\nVerde.Setup.Initialize(new Verde.Settings\r\n{\r\n    TestsAssembly = System.Reflection.Assembly.GetExecutingAssembly()\r\n});\r\n```\r\n\r\nThe minimal setup requires you to only provide a reference to the assembly where your integration tests are defined.  In this case the tests are assumed to reside in the MVC Application itself, but they could just as easily be in a dedicated class library. There are several other settings you can override if you choose, but none are required. You could always wrap this statement in a conditional block so that the Verde framework is enabled based on a custom configuration setting. Additionally you can choose to authorize access to the Verde endpoints by providing a custom AuthorizationCheck delegate:\r\n\r\n```csharp\r\nVerde.Setup.Initialize(new Verde.Settings\r\n{\r\n    TestsAssembly = System.Reflection.Assembly.GetExecutingAssembly(),\r\n    AuthorizationCheck = (context) =>\r\n    {\r\n        return context.User.IsInRole(\"admin\");\r\n    }\r\n});\r\n```\r\nThe Initialize method automatically registers several MVC routes in your application's route table. By default these routes are registered under a \"@integrationtests\" path, but you can override this using **Settings.RoutePath**.\r\n\r\n* __http://your_application_url/@integrationtests__ - opens the GUI test runner\r\n* __http://your_application_url/@integrationtests/tests__ - returns a JSON listing of all the fixtures and tests found in the TestsAssembly\r\n* __http://your_application_url/@integrationtests/execute__ - execute the tests. \r\n\r\nIf no querystring parameters are provided to the /execute command, all tests are run. However you can also limit what tests are run to a single fixture or a single test in a fixture by appending the fixture and/or test parameters to the URL like so: _/@integrationtests/execute?fixture=MvcMusicStore.IntegrationTests.ShoppingCart_ or _/@integrationtests/execute/fixture=MvcMusicStore.IntegrationTests.ShoppingCart&test=RemoveFromCart_ValidJson_\r\n\r\nHere is a sample JSON response from the /execute command:\r\n\r\n```json\r\n{\r\n  \"duration\": 823,\r\n  \"failed\": true,\r\n  \"tests\": [\r\n    {\r\n      \"testName\": \"AddToCart_ValidItem_Succeeds\",\r\n      \"fixture\": \"MvcMusicStore.IntegrationTests.ShoppingCart\",\r\n      \"duration\": 219,\r\n      \"failed\": false,\r\n      \"message\": \"Passed\"\r\n    },\r\n    {\r\n      \"testName\": \"ViewCart_ExpectedHtml\",\r\n      \"fixture\": \"MvcMusicStore.IntegrationTests.ShoppingCart\",\r\n      \"duration\": 430,\r\n      \"failed\": false,\r\n      \"message\": \"Passed\"\r\n    },\r\n    {\r\n      \"testName\": \"RemoveFromCart_ValidJson\",\r\n      \"fixture\": \"MvcMusicStore.IntegrationTests.ShoppingCart\",\r\n      \"duration\": 175,\r\n      \"failed\": true,\r\n      \"message\": \"  The shopping cart should have 0 items left.\\r\\n  Expected: 1\\r\\n  But was:  0\\r\\n\\r\\n\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nNow all that's left is to write some tests.\r\n\r\n##Writing Tests\r\nVerde integration tests are simply NUnit tests decorated with the IntegrationTest attribute declared within a class decorated by the IntegrationFixture attribute. When a test executes, it in turn creates a nested handler corresponding to the application URL being tested. After the  method completes, control is returned back to the current request. The bit that makes this possible is the [HttpServerUtility.Execute](http://msdn.microsoft.com/en-us/library/system.web.httpserverutility.execute.aspx) method. The Verde.Executor namespace defines a MvcExectorScope class that is used to define the scope of this nested execution.\r\n\r\nThe source code includes a fork of [Jon Galloway](http://weblogs.asp.net/jgalloway/)'s [MvcMusicStore sample app](http://mvcmusicstore.codeplex.com/) that has been augmented with Verde integration tests. Here are some examples:\r\n\r\n### Basic ViewResult\r\nIn this test we get an arbitrary Album and define a MvcExecutorScope for the details page of that album. It is highly recommended that a __using__ statement be implemented to control the lifetime of the ExecutorScope. Inside the __using__ block, the *scope* variable provides us access to some helpful contextual objects like the HttpContext, Controller, ViewData, Action, and ResponseText that the test can make assertions against. The [ScrapySharp](http://nuget.org/packages/ScrapySharp) library, in conjunction with the [HtmlAgilityPack](http://htmlagilitypack.codeplex.com/) (both easily installable via NuGet), provides a CSS selector engine that allows the test to examine the contents of the HTML ResponseText in a more elegant way than brute force string matching.\r\n\r\n```csharp\r\n[IntegrationTest]\r\npublic void Index_Load_ExpectedHtml()\r\n{\r\n    // Get a product to load the details page for.\r\n    var album = storeDB.Albums\r\n        .Take(1)\r\n        .First();\r\n\r\n    using (var scope = new MvcExecutorScope(\"Store/Details/\" + album.AlbumId))\r\n    {\r\n\t\tAssert.AreEqual(200, scope.HttpContext.Response.StatusCode);\r\n        Assert.IsTrue(scope.Controller is StoreController);\r\n        Assert.AreEqual(\"Details\", scope.Action);\r\n\r\n        var model = scope.Controller.ViewData.Model as Album;\r\n        Assert.IsNotNull(model);\r\n        Assert.AreEqual(album.AlbumId, model.AlbumId);\r\n\r\n        Assert.IsFalse(String.IsNullOrEmpty(scope.ResponseText));\r\n\r\n        // Load the ResponseText into an HtmlDocument\r\n        var html = new HtmlDocument();\r\n        html.LoadHtml(scope.ResponseText);\r\n\r\n        // Use ScrappySharp CSS selector to make assertions about the rendered HTML\r\n        Assert.AreEqual(album.Title, html.DocumentNode.CssSelect(\"#main h2\").First().InnerText);\r\n    }\r\n}\r\n```\r\n\t\r\n### RedirectAction\r\nWe can also test action results that do a redirect. \r\n\r\n```csharp\r\n[IntegrationTest]\r\npublic void AddToCart_ValidItem_Succeeds()\r\n{\r\n    // Get a product to load the details page for.\r\n    var album = storeDB.Albums\r\n        .Take(1)\r\n        .First();\r\n    \r\n    var settings = new ExecutorSettings(\"ShoppingCart/AddToCart/\" + album.AlbumId) { \r\n        User = new GenericPrincipal(new GenericIdentity(\"GenghisKahn\"), null) \r\n    };\r\n\r\n    using (var scope = new MvcExecutorScope(settings))\r\n    {\r\n        Assert.AreEqual(302, scope.HttpContext.Response.StatusCode);\r\n        Assert.AreEqual(\"/ShoppingCart\", scope.HttpContext.Response.RedirectLocation);\r\n\r\n        // Now verify that the cart contains the item we just added.\r\n        var cart = MvcMusicStore.Models.ShoppingCart.GetCart(scope.HttpContext);\r\n        var cartItems = cart.GetCartItems();\r\n        Assert.AreEqual(1, cartItems.Count);\r\n        Assert.AreEqual(album.AlbumId, cartItems[0].AlbumId);\r\n                        \r\n        // Finally clear the cart.\r\n        cart.EmptyCart();\r\n    }\r\n}\r\n```\r\n\r\n### POST Request and JSON Responses\r\nWe can also test a POST request and Json action results.\r\n\r\n```csharp\r\n[IntegrationTest]\r\npublic void RemoveFromCart_ValidJson()\r\n{\r\n    // Add an item to the cart so we have something to remove.\r\n    string userName = \"JimmyHendrix\";\r\n    MvcMusicStore.Models.ShoppingCart cart = TestUtil.AddItemsToCart(\r\n        userName, storeDB.Albums.Take(1));\r\n    var recordId = cart.GetCartItems().First().RecordId;                       \r\n\r\n    var settings = new ExecutorSettings(\"ShoppingCart/RemoveFromCart/\" + recordId) \r\n    { \r\n        User = TestUtil.CreateUser(userName), \r\n        HttpMethod = \"POST\"\r\n    };\r\n\r\n    using (var scope = new MvcExecutorScope(settings))\r\n    {\r\n        Assert.AreEqual(\"application/json\", scope.HttpContext.Response.ContentType);\r\n\r\n\t// Use JSON.Net to deserialize the response\r\n        var deserializedResponse = JsonConvert.DeserializeObject<ShoppingCartRemoveViewModel>\r\n           (scope.ResponseText);\r\n        Assert.AreEqual(0.0d, deserializedResponse.CartTotal, \r\n           \"The shopping cart total should be $0.00.\");\r\n        Assert.AreEqual(0, deserializedResponse.ItemCount, \r\n           \"The shopping cart should have 0 items left.\");\r\n        Assert.AreEqual(recordId, deserializedResponse.DeleteId);\r\n    }\r\n}\r\n```\r\n\r\n##More Details\r\n\r\n![Sequence Diagram](http://www.websequencediagrams.com/cgi-bin/cdraw?lz=dGl0bGUgVmVyZGUgU2VxdWVuY2UKCnBhcnRpY2lwYW50ICIAFwZHVUkgPGJyb3dzZXI-IiBhcyBndWkAHA1JbnRlZ3JhdGlvblRlc3RIYW5kbGVyIGFzIGgABQYASg1OVW5pdFRlc3RSdW5uACEGcgAFBQA8GEZpeHR1cmUgYXMgZgAFBgCBGg1NdmNFeGVjdXRvclNjb3AAIwVzY29wABURRnJhbWV3b3JrIGFzIG12YwCBYA1Zb3VyQ29udHJvbACBNQdjAAUJCgoKZ3VpLT4AgUcHOiAAagZlIFRlc3RzCgCBXgctPgCBQQYADxAKbG9vcCBmb3JlYWNoAIFFEwoAgXgGLT4AgVYHOiBDcmVhdGUKYWN0aXZhdGUAgW0JADEYVGVzdAA0Ekludm9rZQoAgiwHLT4Agg8FAEsSAIIlBgCCLAUtPm12YzogU2VydmVyLgCBXgcKbXZjLT4AggMKAFEIIEFjdGlvbgpub3RlIHJpZ2h0IG9mAIIpDCAgICAgICAgAIJLC2UAgjIGcyAAFAlqdXN0IGFzIGl0IGRvZXMgd2hlbgAxCWkAgT0FZCBieSBhIACEewcuAFMFZW5kIG5vdGUKAIMbCi0AgTcHcmV0dXJuAIEXB1Jlc3VsdACBPQYAgVcFAIMzBwCBJxUAhFUIICAgTWFrZSBBc3NlcnQgc3RhdGVtZW50cwoAbgkAgkUQRGlzcG9zZQpkZQCCSQ8ABgsAhTQIZW5kIGxvb3AAAQhwCgCDeggAhFcLAIE_BwCGIgUAgT8FAIRdCi0-Z3VpOgCBYAdKU09OIHIAGwcKCgoK&s=vs2010)\r\n[View Larger](http://www.websequencediagrams.com/cgi-bin/cdraw?lz=dGl0bGUgVmVyZGUgU2VxdWVuY2UKCnBhcnRpY2lwYW50ICIAFwZHVUkgPGJyb3dzZXI-IiBhcyBndWkAHA1JbnRlZ3JhdGlvblRlc3RIYW5kbGVyIGFzIGgABQYASg1OVW5pdFRlc3RSdW5uACEGcgAFBQA8GEZpeHR1cmUgYXMgZgAFBgCBGg1NdmNFeGVjdXRvclNjb3AAIwVzY29wABURRnJhbWV3b3JrIGFzIG12YwCBYA1Zb3VyQ29udHJvbACBNQdjAAUJCgoKZ3VpLT4AgUcHOiAAagZlIFRlc3RzCgCBXgctPgCBQQYADxAKbG9vcCBmb3JlYWNoAIFFEwoAgXgGLT4AgVYHOiBDcmVhdGUKYWN0aXZhdGUAgW0JADEYVGVzdAA0Ekludm9rZQoAgiwHLT4Agg8FAEsSAIIlBgCCLAUtPm12YzogU2VydmVyLgCBXgcKbXZjLT4AggMKAFEIIEFjdGlvbgpub3RlIHJpZ2h0IG9mAIIpDCAgICAgICAgAIJLC2UAgjIGcyAAFAlqdXN0IGFzIGl0IGRvZXMgd2hlbgAxCWkAgT0FZCBieSBhIACEewcuAFMFZW5kIG5vdGUKAIMbCi0AgTcHcmV0dXJuAIEXB1Jlc3VsdACBPQYAgVcFAIMzBwCBJxUAhFUIICAgTWFrZSBBc3NlcnQgc3RhdGVtZW50cwoAbgkAgkUQRGlzcG9zZQpkZQCCSQ8ABgsAhTQIZW5kIGxvb3AAAQhwCgCDeggAhFcLAIE_BwCGIgUAgT8FAIRdCi0-Z3VpOgCBYAdKU09OIHIAGwcKCgoK&s=vs2010)\r\n\r\n##What's with the name?\r\nIn case it's not obvious, verde is Spanish for green, passing tests are green...clever right?"}